---
description:
globs:
alwaysApply: true
---
# üñ•Ô∏è Server Development Rules

## üìÅ Server Architecture
Based on [SYSTEM_DESIGN.md](mdc:frontend/SYSTEM_DESIGN.md) API Architecture and Backend sections.

### Directory Structure
```
server/src/
‚îú‚îÄ‚îÄ config/             # Database and app configuration
‚îú‚îÄ‚îÄ controllers/        # Request handlers and business logic
‚îú‚îÄ‚îÄ middleware/         # Custom middleware functions
‚îú‚îÄ‚îÄ models/            # Mongoose schemas and models
‚îú‚îÄ‚îÄ routes/            # API route definitions
‚îú‚îÄ‚îÄ types/             # TypeScript type definitions
‚îî‚îÄ‚îÄ utils/             # Helper functions and utilities
```

## üîß Development Commands
All commands can be executed without permission:
```bash
cd server
pnpm install           # Install dependencies
pnpm dev               # Start development server with nodemon
pnpm start             # Start production server
pnpm test              # Run unit and integration tests
pnpm test:watch        # Run tests in watch mode
pnpm lint              # Run ESLint
pnpm seed              # Seed database with initial data
pnpm db:migrate        # Run database migrations
```

## üõ†Ô∏è API Development Standards

### RESTful Endpoint Structure
Follow the documented API structure from [SYSTEM_DESIGN.md](mdc:frontend/SYSTEM_DESIGN.md):
```
/api/auth              # Authentication endpoints
/api/phases            # Phase management
/api/modules           # Module management
/api/games             # Game system
/api/labs              # Lab system
/api/users             # User management
/api/achievements      # Achievement system
```

### Controller Pattern
```typescript
// server/src/controllers/exampleController.ts
import { Request, Response, NextFunction } from 'express';
import { asyncHandler } from '../middleware/asyncHandler';
import { ErrorResponse } from '../utils/errorResponse';

export const getExample = asyncHandler(
  async (req: Request, res: Response, next: NextFunction) => {
    const { id } = req.params;

    const data = await ExampleModel.findById(id);

    if (!data) {
      return next(new ErrorResponse('Resource not found', 404));
    }

    res.status(200).json({
      success: true,
      message: 'Data retrieved successfully',
      data
    });
  }
);
```

### Route Pattern
```typescript
// server/src/routes/example.ts
import express from 'express';
import {
  getExample,
  createExample,
  updateExample,
  deleteExample
} from '../controllers/exampleController';
import { protect, authorize } from '../middleware/auth';
import { validateRequest } from '../middleware/validation';

const router = express.Router();

router.route('/')
  .get(getExample)
  .post(protect, validateRequest('createExample'), createExample);

router.route('/:id')
  .get(getExample)
  .put(protect, validateRequest('updateExample'), updateExample)
  .delete(protect, authorize('admin'), deleteExample);

export default router;
```

## üóÑÔ∏è Database Rules

### Mongoose Model Pattern
```typescript
// server/src/models/Example.ts
import mongoose, { Document, Schema } from 'mongoose';

export interface IExample extends Document {
  id: string;
  title: string;
  description: string;
  createdAt: Date;
  updatedAt: Date;
}

const ExampleSchema: Schema = new Schema({
  id: {
    type: String,
    required: [true, 'ID is required'],
    unique: true
  },
  title: {
    type: String,
    required: [true, 'Title is required'],
    maxlength: [100, 'Title cannot exceed 100 characters']
  },
  description: {
    type: String,
    required: [true, 'Description is required']
  }
}, {
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});

// Indexes for performance
ExampleSchema.index({ id: 1 });
ExampleSchema.index({ title: 'text' });

export default mongoose.model<IExample>('Example', ExampleSchema);
```

### Database Connection
```typescript
// server/src/config/database.ts
import mongoose from 'mongoose';

const connectDB = async (): Promise<void> => {
  try {
    const conn = await mongoose.connect(process.env.MONGODB_URI!);
    console.log(`MongoDB Connected: ${conn.connection.host}`);
  } catch (error) {
    console.error('Database connection error:', error);
    process.exit(1);
  }
};

export default connectDB;
```

## üîê Authentication & Security

### JWT Middleware
```typescript
// server/src/middleware/auth.ts
import jwt from 'jsonwebtoken';
import { asyncHandler } from './asyncHandler';
import User from '../models/User';

export const protect = asyncHandler(async (req, res, next) => {
  let token;

  if (req.headers.authorization?.startsWith('Bearer')) {
    token = req.headers.authorization.split(' ')[1];
  }

  if (!token) {
    return next(new ErrorResponse('Not authorized', 401));
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as any;
    req.user = await User.findById(decoded.userId);
    next();
  } catch (error) {
    return next(new ErrorResponse('Not authorized', 401));
  }
});
```

### Security Headers & Middleware
```typescript
// Security middleware stack
app.use(helmet());                    // Security headers
app.use(cors(corsOptions));          // CORS configuration
app.use(rateLimit(rateLimitOptions)); // Rate limiting
app.use(mongoSanitize());            // NoSQL injection prevention
app.use(xss());                      // XSS protection
```

## ‚úÖ Validation Rules

### Request Validation Pattern
```typescript
// server/src/middleware/validation.ts
import { body, param, query, validationResult } from 'express-validator';

export const validateRequest = (validationType: string) => {
  const validations = {
    createUser: [
      body('username').isLength({ min: 3 }).trim().escape(),
      body('email').isEmail().normalizeEmail(),
      body('password').isLength({ min: 6 })
    ],
    updateUser: [
      param('id').isMongoId(),
      body('username').optional().isLength({ min: 3 }).trim().escape(),
      body('email').optional().isEmail().normalizeEmail()
    ]
  };

  return [
    ...validations[validationType],
    (req, res, next) => {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          success: false,
          message: 'Validation error',
          errors: errors.array()
        });
      }
      next();
    }
  ];
};
```

## üß™ Testing Requirements

### API Testing Pattern
```typescript
// server/src/tests/auth.test.ts
import request from 'supertest';
import app from '../app';
import User from '../models/User';

describe('Authentication Endpoints', () => {
  beforeEach(async () => {
    await User.deleteMany({});
  });

  describe('POST /api/auth/register', () => {
    it('should register a new user', async () => {
      const userData = {
        username: 'testuser',
        email: 'test@example.com',
        password: 'password123'
      };

      const response = await request(app)
        .post('/api/auth/register')
        .send(userData)
        .expect(201);

      expect(response.body.success).toBe(true);
      expect(response.body.data.user.email).toBe(userData.email);
    });

    it('should not register user with invalid email', async () => {
      const userData = {
        username: 'testuser',
        email: 'invalid-email',
        password: 'password123'
      };

      await request(app)
        .post('/api/auth/register')
        .send(userData)
        .expect(400);
    });
  });
});
```

### Test Commands
```bash
pnpm test                 # Run all tests
pnpm test:unit           # Run unit tests only
pnpm test:integration    # Run integration tests only
pnpm test:coverage       # Run tests with coverage report
```

## üìä Database Seeding

### Seed Data Pattern
```typescript
// server/src/utils/seedData.ts
import { PHASES, MODULES, GAMES, LABS } from '../data/appData';

export const seedDatabase = async () => {
  try {
    // Clear existing data
    await Phase.deleteMany({});
    await Module.deleteMany({});

    // Seed phases
    await Phase.insertMany(PHASES);
    console.log('Phases seeded successfully');

    // Seed modules
    await Module.insertMany(MODULES);
    console.log('Modules seeded successfully');

  } catch (error) {
    console.error('Seeding error:', error);
    process.exit(1);
  }
};
```

## üîÑ Error Handling

### Global Error Handler
```typescript
// server/src/middleware/errorHandler.ts
export const errorHandler = (err, req, res, next) => {
  let error = { ...err };
  error.message = err.message;

  // Log error
  console.error(err.stack);

  // Mongoose bad ObjectId
  if (err.name === 'CastError') {
    const message = 'Resource not found';
    error = new ErrorResponse(message, 404);
  }

  // Mongoose duplicate key
  if (err.code === 11000) {
    const message = 'Duplicate field value entered';
    error = new ErrorResponse(message, 400);
  }

  // Mongoose validation error
  if (err.name === 'ValidationError') {
    const message = Object.values(err.errors).map(val => val.message);
    error = new ErrorResponse(message, 400);
  }

  res.status(error.statusCode || 500).json({
    success: false,
    message: error.message || 'Server Error'
  });
};
```

## üìã Environment Configuration

### Environment Variables
```env
# server/.env
NODE_ENV=development
PORT=5001
MONGODB_URI=mongodb://localhost:27017/hack-the-world
JWT_SECRET=your-super-secret-key
JWT_EXPIRES_IN=7d
CLIENT_URL=http://localhost:5173
BCRYPT_ROUNDS=12
```

## üöÄ Performance Rules
- **ALWAYS** use database indexes for frequently queried fields
- **ALWAYS** implement pagination for list endpoints
- **ALWAYS** use connection pooling for database connections
- **ALWAYS** implement caching for expensive operations
- **ALWAYS** use compression middleware

## üìã API Response Format
```typescript
// Standard success response
{
  success: true,
  message: string,
  data: object,
  pagination?: {
    page: number,
    limit: number,
    total: number,
    pages: number
  }
}

// Standard error response
{
  success: false,
  message: string,
  errors?: Array<{
    field: string,
    message: string
  }>
}
```

## üîß Logging Standards
```typescript
// Use structured logging
import winston from 'winston';

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),
    new winston.transports.File({ filename: 'logs/combined.log' })
  ]
});
```

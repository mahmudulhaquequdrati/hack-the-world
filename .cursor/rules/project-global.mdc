---
description:
globs:
alwaysApply: true
---
# 🛡️ Hack The World - Global Project Rules

## 📋 Project Overview
This is a comprehensive cybersecurity learning platform with gamified education system. Follow the [SYSTEM_DESIGN.md](mdc:frontend/SYSTEM_DESIGN.md) as the single source of truth for all architectural decisions we cannot add things more but we can suggest more by optimizing not adding.

## 🚀 Before Starting Any Work
**MANDATORY CHECKLIST:**
 - Each time i say something update in the [task.md](mdc:task.md) first then after completing that update the [task.md](mdc:task.md) again.
 -  If any time new tasks comes or we update anything (functionality or tasks) then dont forget to update everywhere, docs, [task.md](mdc:task.md), testing case so that all are syncronized.
 -  If the current command or work does not included in [task.md](mdc:task.md) then add first then do other work.
 -  Always check [planning.md](mdc:planning.md) for current project roadmap
 -  Always check [task.md](mdc:task.md) for active tasks and progress tracking
 - Review relevant sections in [SYSTEM_DESIGN.md](mdc:frontend/SYSTEM_DESIGN.md)
 - Ensure the feature/change is documented in the system design


## 🔧 Command Execution Policy
**ALL COMMANDS ARE ALLOWED WITHOUT PERMISSION:**
- `pnpm install`, `pnpm dev`, `pnpm build`, `pnpm start`, `pnpm test`
- `npm install`, `npm run dev`, `npm run build`, `npm start`, `npm test`
- `curl` requests for API testing
- Package installation/removal commands
- Docker commands
- Database operations
- File system operations
- Any development, testing, or deployment commands

## 📁 Project Structure
```
hack-the-world/
├── frontend/          # React frontend application
├── server/           # Express.js backend API
├── planning.md       # Project planning and roadmap
├── task.md          # Active tasks and progress tracking
└── .cursor/rules/   # Cursor AI rules
```

## 🧪 Testing Requirements
- **MANDATORY**: Every feature must have unit tests
- **MANDATORY**: Every API endpoint must have tests
- **MANDATORY**: Every React component must be tested
- Run tests after any significant change: `pnpm test`
- No feature is complete without passing tests

## 🚫 Development Constraints
- **NEVER** implement features not documented in [SYSTEM_DESIGN.md](mdc:frontend/SYSTEM_DESIGN.md)
- **NEVER** create features that don't work completely
- **ALWAYS** follow the documented API endpoints and data models
- **ALWAYS** use React functional components
- **ALWAYS** prioritize reusable components

## 📊 Data Sources
- **Single Source of Truth**: [frontend/src/lib/appData.ts](mdc:frontend/src/lib/appData.ts)
- **API Base URL**: `http://localhost:5001/api`
- **Database**: MongoDB with Mongoose ODM

## 🔄 Workflow Process
1. Check planning.md and task.md
2. Review system design documentation
3. Implement feature following documented patterns
4. Write comprehensive tests
5. Update task.md with progress
6. Verify feature works end-to-end

## 🎯 Quality Standards
- Clean, readable code with proper TypeScript types for frontend, JavaScript for backend/server
- Consistent error handling patterns
- Proper component organization
- Security best practices implementation
- Performance optimization considerations
